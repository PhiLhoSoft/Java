=== modified file 'NaturalOrderComparator.java'
@@ -80,10 +80,20 @@
                     return -1;
                 if (n1 > n2)
                     return 1;
-                // Here, the numbers are equal. If we reached the end of the strings,
-                // we say they are equal, otherwise we continue on comparing strings
+                // Here, the numbers are equal.
+
+                // If we reached the end of both strings, we say they are equal.
                 if (pos1 == len1 && pos2 == len2)
                 	return 0;
+
+                // End of first string, smaller than the second one
+                if (pos1 == len1)
+                	return -1;
+                // End of second string, smaller than the first one
+                if (pos2 == len2)
+                	return 1;
+
+                // We continue on comparing strings.
             }
             else
             {
@@ -105,16 +115,18 @@
                     // Next chars
                     ++pos1; ++pos2;
                 // Stop if one digit is found or if we reached the end of one string
-                } while (b1 && b2 && pos1 < len1 && pos2 < len2);
+                } while (b1 && pos1 < len1 && pos2 < len2);

-                if (b1 && pos1 == len1 && pos2 == len2)
-                	return 0; // At the end with non-digits without finding differences
+                if (b1) // b1 == b2, no digit and no difference found
+                {
+	                if (pos1 == len1 && pos2 == len2)
+	                	return 0; // At the end without finding differences
+	                if (pos1 == len1)
+	                	return -1; // First string smaller
+	                if (pos2 == len2)
+	                	return 1; // Second string smaller
+                }
             }
-            // Have we reached one end?
-            if (pos1 == len1 && len1 < len2)
-                return -1; // s1 is shorter, so smaller (all chars were equal so far)
-            if (pos2 == len2 && len2 < len1)
-                return 1; // s2 is shorter, so smaller

             // Not at the end, we stopped on different kind of char (digit vs. non-digits), let's process them
     		if (!bIsDigit) // Compared chars, we went one char too far, into digits

=== modified file 'NaturalOrderComparatorTest.java'
@@ -21,7 +21,7 @@
 		{
 			String s1 = TEST_DATA[i][0];
 			String s2 = TEST_DATA[i][1];
-			assertTrue(testPair(i, s1, s2));
+			assertTrue(testPair(i, s1, s2), "Failed on " + i + " = " + TEST_DATA[i][0] + " vs. " + TEST_DATA[i][1]);
 		}

 		// Same test, starting with number(s)
@@ -30,14 +30,14 @@
 		{
 			String s1 = TEST_DATA[i][0];
 			String s2 = TEST_DATA[i][1];
-			assertTrue(testPair(i, "5:" + s1, "5:" + s2));
+			assertTrue(testPair(i, "5:" + s1, "5:" + s2), "Failed on " + i + " = " + TEST_DATA[i][0] + " vs. " + TEST_DATA[i][1]);
 		}
 		show("\n\n## Shifted pair test 2\n");
 		for (int i = 0; i < TEST_DATA.length; i++)
 		{
 			String s1 = TEST_DATA[i][0];
 			String s2 = TEST_DATA[i][1];
-			assertTrue(testPair(i, "75:" + s1, "75:" + s2));
+			assertTrue(testPair(i, "75:" + s1, "75:" + s2), "Failed on " + i + " = " + TEST_DATA[i][0] + " vs. " + TEST_DATA[i][1]);
 		}

 		show("\n\n## Global sort test\n");
@@ -129,6 +137,20 @@
 		{ "xyz32-157//H", "xyz32-158//H" },
 		{ "xyz32-157//H", "xyz32-1571//H" },
 		{ "xyz32-257//H", "xyz32-1570//H" },
+		// Found a bug! Bad handling of non-significant zeroes...
+		{ "010", "10T" },
+		{ "0011", "11ab" },
+		{ "a01", "a1", EQU },
+		{ "a011", "a11", EQU },
+		{ "a001", "a01", EQU },
+		{ "a0011", "a011", EQU },
+		{ "a01t", "a1t", EQU },
+		{ "a011t", "a11t", EQU },
+		{ "a001t", "a01t", EQU },
+		{ "a0011t", "a011t", EQU },
+		{ "a01b", "a1bc" },
+		{ "a011b", "a11bx" },
+		{ "aa01", "aa2" },
 	};
 	private static final String[] BULK_DATA =
 	{
