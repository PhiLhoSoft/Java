// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   PerspectiveTransform.java

package javax.media.jai;

import java.awt.geom.*;
import java.io.Serializable;

// Referenced classes of package javax.media.jai:
//            JaiI18N

public final class PerspectiveTransform
    implements Cloneable, Serializable
{

    public PerspectiveTransform()
    {
        m00 = m11 = m22 = 1.0D;
        m01 = m02 = m10 = m12 = m20 = m21 = 0.0D;
    }

    /**
     * @deprecated Method PerspectiveTransform is deprecated
     */

    public PerspectiveTransform(float f, float f1, float f2, float f3, float f4, float f5, float f6, 
            float f7, float f8)
    {
        m00 = f;
        m01 = f1;
        m02 = f2;
        m10 = f3;
        m11 = f4;
        m12 = f5;
        m20 = f6;
        m21 = f7;
        m22 = f8;
    }

    /**
     * @deprecated Method PerspectiveTransform is deprecated
     */

    public PerspectiveTransform(double d, double d1, double d2, double d3, double d4, double d5, double d6, 
            double d7, double d8)
    {
        m00 = d;
        m01 = d1;
        m02 = d2;
        m10 = d3;
        m11 = d4;
        m12 = d5;
        m20 = d6;
        m21 = d7;
        m22 = d8;
    }

    /**
     * @deprecated Method PerspectiveTransform is deprecated
     */

    public PerspectiveTransform(float af[])
    {
        if(af == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            m00 = af[0];
            m01 = af[1];
            m02 = af[2];
            m10 = af[3];
            m11 = af[4];
            m12 = af[5];
            m20 = af[6];
            m21 = af[7];
            m22 = af[8];
            return;
        }
    }

    /**
     * @deprecated Method PerspectiveTransform is deprecated
     */

    public PerspectiveTransform(float af[][])
    {
        if(af == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            m00 = af[0][0];
            m01 = af[0][1];
            m02 = af[0][2];
            m10 = af[1][0];
            m11 = af[1][1];
            m12 = af[1][2];
            m20 = af[2][0];
            m21 = af[2][1];
            m22 = af[2][2];
            return;
        }
    }

    /**
     * @deprecated Method PerspectiveTransform is deprecated
     */

    public PerspectiveTransform(double ad[])
    {
        if(ad == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            m00 = ad[0];
            m01 = ad[1];
            m02 = ad[2];
            m10 = ad[3];
            m11 = ad[4];
            m12 = ad[5];
            m20 = ad[6];
            m21 = ad[7];
            m22 = ad[8];
            return;
        }
    }

    public PerspectiveTransform(double ad[][])
    {
        if(ad == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            m00 = ad[0][0];
            m01 = ad[0][1];
            m02 = ad[0][2];
            m10 = ad[1][0];
            m11 = ad[1][1];
            m12 = ad[1][2];
            m20 = ad[2][0];
            m21 = ad[2][1];
            m22 = ad[2][2];
            return;
        }
    }

    public PerspectiveTransform(AffineTransform affinetransform)
    {
        if(affinetransform == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            m00 = affinetransform.getScaleX();
            m01 = affinetransform.getShearX();
            m02 = affinetransform.getTranslateX();
            m10 = affinetransform.getShearY();
            m11 = affinetransform.getScaleY();
            m12 = affinetransform.getTranslateY();
            m20 = 0.0D;
            m21 = 0.0D;
            m22 = 1.0D;
            return;
        }
    }

    private final void makeAdjoint()
    {
        double d = m11 * m22 - m12 * m21;
        double d1 = m12 * m20 - m10 * m22;
        double d2 = m10 * m21 - m11 * m20;
        double d3 = m02 * m21 - m01 * m22;
        double d4 = m00 * m22 - m02 * m20;
        double d5 = m01 * m20 - m00 * m21;
        double d6 = m01 * m12 - m02 * m11;
        double d7 = m02 * m10 - m00 * m12;
        double d8 = m00 * m11 - m01 * m10;
        m00 = d;
        m01 = d3;
        m02 = d6;
        m10 = d1;
        m11 = d4;
        m12 = d7;
        m20 = d2;
        m21 = d5;
        m22 = d8;
    }

    private final void normalize()
    {
        double d = 1.0D / m22;
        m00 *= d;
        m01 *= d;
        m02 *= d;
        m10 *= d;
        m11 *= d;
        m12 *= d;
        m20 *= d;
        m21 *= d;
        m22 = 1.0D;
    }

    private static final void getSquareToQuad(double d, double d1, double d2, double d3, 
            double d4, double d5, double d6, double d7, PerspectiveTransform perspectivetransform)
    {
        double d8 = ((d - d2) + d4) - d6;
        double d9 = ((d1 - d3) + d5) - d7;
        perspectivetransform.m22 = 1.0D;
        if(d8 == 0.0D && d9 == 0.0D)
        {
            perspectivetransform.m00 = d2 - d;
            perspectivetransform.m01 = d4 - d2;
            perspectivetransform.m02 = d;
            perspectivetransform.m10 = d3 - d1;
            perspectivetransform.m11 = d5 - d3;
            perspectivetransform.m12 = d1;
            perspectivetransform.m20 = 0.0D;
            perspectivetransform.m21 = 0.0D;
        } else
        {
            double d10 = d2 - d4;
            double d11 = d3 - d5;
            double d12 = d6 - d4;
            double d13 = d7 - d5;
            double d14 = 1.0D / (d10 * d13 - d12 * d11);
            perspectivetransform.m20 = (d8 * d13 - d12 * d9) * d14;
            perspectivetransform.m21 = (d10 * d9 - d8 * d11) * d14;
            perspectivetransform.m00 = (d2 - d) + perspectivetransform.m20 * d2;
            perspectivetransform.m01 = (d6 - d) + perspectivetransform.m21 * d6;
            perspectivetransform.m02 = d;
            perspectivetransform.m10 = (d3 - d1) + perspectivetransform.m20 * d3;
            perspectivetransform.m11 = (d7 - d1) + perspectivetransform.m21 * d7;
            perspectivetransform.m12 = d1;
        }
    }

    public static PerspectiveTransform getSquareToQuad(double d, double d1, double d2, double d3, 
            double d4, double d5, double d6, double d7)
    {
        PerspectiveTransform perspectivetransform = new PerspectiveTransform();
        getSquareToQuad(d, d1, d2, d3, d4, d5, d6, d7, perspectivetransform);
        return perspectivetransform;
    }

    public static PerspectiveTransform getSquareToQuad(float f, float f1, float f2, float f3, float f4, float f5, float f6, float f7)
    {
        return getSquareToQuad(f, f1, f2, f3, f4, f5, f6, f7);
    }

    public static PerspectiveTransform getQuadToSquare(double d, double d1, double d2, double d3, 
            double d4, double d5, double d6, double d7)
    {
        PerspectiveTransform perspectivetransform = new PerspectiveTransform();
        getSquareToQuad(d, d1, d2, d3, d4, d5, d6, d7, perspectivetransform);
        perspectivetransform.makeAdjoint();
        return perspectivetransform;
    }

    public static PerspectiveTransform getQuadToSquare(float f, float f1, float f2, float f3, float f4, float f5, float f6, float f7)
    {
        return getQuadToSquare(f, f1, f2, f3, f4, f5, f6, f7);
    }

    public static PerspectiveTransform getQuadToQuad(double d, double d1, double d2, double d3, 
            double d4, double d5, double d6, double d7, double d8, double d9, double d10, 
            double d11, double d12, double d13, double d14, double d15)
    {
        PerspectiveTransform perspectivetransform = getQuadToSquare(d, d1, d2, d3, d4, d5, d6, d7);
        PerspectiveTransform perspectivetransform1 = getSquareToQuad(d8, d9, d10, d11, d12, d13, d14, d15);
        perspectivetransform.concatenate(perspectivetransform1);
        return perspectivetransform;
    }

    public static PerspectiveTransform getQuadToQuad(float f, float f1, float f2, float f3, float f4, float f5, float f6, float f7, 
            float f8, float f9, float f10, float f11, float f12, float f13, float f14, 
            float f15)
    {
        return getQuadToQuad(f, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15);
    }

    public double getDeterminant()
    {
        return (m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m12 * m20)) + m02 * (m10 * m21 - m11 * m20);
    }

    /**
     * @deprecated Method getMatrix is deprecated
     */

    public double[] getMatrix(double ad[])
    {
        if(ad == null)
            ad = new double[9];
        ad[0] = m00;
        ad[1] = m01;
        ad[2] = m02;
        ad[3] = m10;
        ad[4] = m11;
        ad[5] = m12;
        ad[6] = m20;
        ad[7] = m21;
        ad[8] = m22;
        return ad;
    }

    public double[][] getMatrix(double ad[][])
    {
        if(ad == null)
            ad = new double[3][3];
        ad[0][0] = m00;
        ad[0][1] = m01;
        ad[0][2] = m02;
        ad[1][0] = m10;
        ad[1][1] = m11;
        ad[1][2] = m12;
        ad[2][0] = m20;
        ad[2][1] = m21;
        ad[2][2] = m22;
        return ad;
    }

    public void translate(double d, double d1)
    {
        PerspectiveTransform perspectivetransform = new PerspectiveTransform();
        perspectivetransform.setToTranslation(d, d1);
        concatenate(perspectivetransform);
    }

    public void rotate(double d)
    {
        PerspectiveTransform perspectivetransform = new PerspectiveTransform();
        perspectivetransform.setToRotation(d);
        concatenate(perspectivetransform);
    }

    public void rotate(double d, double d1, double d2)
    {
        PerspectiveTransform perspectivetransform = new PerspectiveTransform();
        perspectivetransform.setToRotation(d, d1, d2);
        concatenate(perspectivetransform);
    }

    public void scale(double d, double d1)
    {
        PerspectiveTransform perspectivetransform = new PerspectiveTransform();
        perspectivetransform.setToScale(d, d1);
        concatenate(perspectivetransform);
    }

    public void shear(double d, double d1)
    {
        PerspectiveTransform perspectivetransform = new PerspectiveTransform();
        perspectivetransform.setToShear(d, d1);
        concatenate(perspectivetransform);
    }

    public void setToIdentity()
    {
        m00 = m11 = m22 = 1.0D;
        m01 = m10 = m02 = m20 = m12 = m21 = 0.0D;
    }

    public void setToTranslation(double d, double d1)
    {
        m00 = 1.0D;
        m01 = 0.0D;
        m02 = d;
        m10 = 0.0D;
        m11 = 1.0D;
        m12 = d1;
        m20 = 0.0D;
        m21 = 0.0D;
        m22 = 1.0D;
    }

    public void setToRotation(double d)
    {
        m00 = Math.cos(d);
        m01 = -Math.sin(d);
        m02 = 0.0D;
        m10 = -m01;
        m11 = m00;
        m12 = 0.0D;
        m20 = 0.0D;
        m21 = 0.0D;
        m22 = 1.0D;
    }

    public void setToRotation(double d, double d1, double d2)
    {
        setToRotation(d);
        double d3 = m10;
        double d4 = 1.0D - m00;
        m02 = d1 * d4 + d2 * d3;
        m12 = d2 * d4 - d1 * d3;
    }

    public void setToScale(double d, double d1)
    {
        m00 = d;
        m01 = 0.0D;
        m02 = 0.0D;
        m10 = 0.0D;
        m11 = d1;
        m12 = 0.0D;
        m20 = 0.0D;
        m21 = 0.0D;
        m22 = 1.0D;
    }

    public void setToShear(double d, double d1)
    {
        m00 = 1.0D;
        m01 = d;
        m02 = 0.0D;
        m10 = d1;
        m11 = 1.0D;
        m12 = 0.0D;
        m20 = 0.0D;
        m21 = 0.0D;
        m22 = 1.0D;
    }

    public void setTransform(AffineTransform affinetransform)
    {
        if(affinetransform == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            m00 = affinetransform.getScaleX();
            m01 = affinetransform.getShearX();
            m02 = affinetransform.getTranslateX();
            m10 = affinetransform.getShearY();
            m11 = affinetransform.getScaleY();
            m12 = affinetransform.getTranslateY();
            m20 = 0.0D;
            m21 = 0.0D;
            m22 = 1.0D;
            return;
        }
    }

    public void setTransform(PerspectiveTransform perspectivetransform)
    {
        if(perspectivetransform == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            m00 = perspectivetransform.m00;
            m01 = perspectivetransform.m01;
            m02 = perspectivetransform.m02;
            m10 = perspectivetransform.m10;
            m11 = perspectivetransform.m11;
            m12 = perspectivetransform.m12;
            m20 = perspectivetransform.m20;
            m21 = perspectivetransform.m21;
            m22 = perspectivetransform.m22;
            return;
        }
    }

    /**
     * @deprecated Method setTransform is deprecated
     */

    public void setTransform(float f, float f1, float f2, float f3, float f4, float f5, float f6, 
            float f7, float f8)
    {
        m00 = f;
        m01 = f3;
        m02 = f6;
        m10 = f1;
        m11 = f4;
        m12 = f7;
        m20 = f2;
        m21 = f5;
        m22 = f8;
    }

    public void setTransform(double ad[][])
    {
        if(ad == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            m00 = ad[0][0];
            m01 = ad[0][1];
            m02 = ad[0][2];
            m10 = ad[1][0];
            m11 = ad[1][1];
            m12 = ad[1][2];
            m20 = ad[2][0];
            m21 = ad[2][1];
            m22 = ad[2][2];
            return;
        }
    }

    public void concatenate(AffineTransform affinetransform)
    {
        if(affinetransform == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            double d = affinetransform.getScaleX();
            double d1 = affinetransform.getShearX();
            double d2 = affinetransform.getTranslateX();
            double d3 = affinetransform.getShearY();
            double d4 = affinetransform.getScaleY();
            double d5 = affinetransform.getTranslateY();
            double d6 = m00 * d + m10 * d1 + m20 * d2;
            double d7 = m01 * d + m11 * d1 + m21 * d2;
            double d8 = m02 * d + m12 * d1 + m22 * d2;
            double d9 = m00 * d3 + m10 * d4 + m20 * d5;
            double d10 = m01 * d3 + m11 * d4 + m21 * d5;
            double d11 = m02 * d3 + m12 * d4 + m22 * d5;
            double d12 = m20;
            double d13 = m21;
            double d14 = m22;
            m00 = d6;
            m10 = d9;
            m20 = d12;
            m01 = d7;
            m11 = d10;
            m21 = d13;
            m02 = d8;
            m12 = d11;
            m22 = d14;
            return;
        }
    }

    public void concatenate(PerspectiveTransform perspectivetransform)
    {
        if(perspectivetransform == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            double d = m00 * perspectivetransform.m00 + m10 * perspectivetransform.m01 + m20 * perspectivetransform.m02;
            double d1 = m00 * perspectivetransform.m10 + m10 * perspectivetransform.m11 + m20 * perspectivetransform.m12;
            double d2 = m00 * perspectivetransform.m20 + m10 * perspectivetransform.m21 + m20 * perspectivetransform.m22;
            double d3 = m01 * perspectivetransform.m00 + m11 * perspectivetransform.m01 + m21 * perspectivetransform.m02;
            double d4 = m01 * perspectivetransform.m10 + m11 * perspectivetransform.m11 + m21 * perspectivetransform.m12;
            double d5 = m01 * perspectivetransform.m20 + m11 * perspectivetransform.m21 + m21 * perspectivetransform.m22;
            double d6 = m02 * perspectivetransform.m00 + m12 * perspectivetransform.m01 + m22 * perspectivetransform.m02;
            double d7 = m02 * perspectivetransform.m10 + m12 * perspectivetransform.m11 + m22 * perspectivetransform.m12;
            double d8 = m02 * perspectivetransform.m20 + m12 * perspectivetransform.m21 + m22 * perspectivetransform.m22;
            m00 = d;
            m10 = d1;
            m20 = d2;
            m01 = d3;
            m11 = d4;
            m21 = d5;
            m02 = d6;
            m12 = d7;
            m22 = d8;
            return;
        }
    }

    public void preConcatenate(AffineTransform affinetransform)
    {
        if(affinetransform == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            double d = affinetransform.getScaleX();
            double d1 = affinetransform.getShearX();
            double d2 = affinetransform.getTranslateX();
            double d3 = affinetransform.getShearY();
            double d4 = affinetransform.getScaleY();
            double d5 = affinetransform.getTranslateY();
            double d6 = d * m00 + d3 * m01;
            double d7 = d1 * m00 + d4 * m01;
            double d8 = d2 * m00 + d5 * m01 + m02;
            double d9 = d * m10 + d3 * m11;
            double d10 = d1 * m10 + d4 * m11;
            double d11 = d2 * m10 + d5 * m11 + m12;
            double d12 = d * m20 + d3 * m21;
            double d13 = d1 * m20 + d4 * m21;
            double d14 = d2 * m20 + d5 * m21 + m22;
            m00 = d6;
            m10 = d9;
            m20 = d12;
            m01 = d7;
            m11 = d10;
            m21 = d13;
            m02 = d8;
            m12 = d11;
            m22 = d14;
            return;
        }
    }

    public void preConcatenate(PerspectiveTransform perspectivetransform)
    {
        if(perspectivetransform == null)
        {
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        } else
        {
            double d = perspectivetransform.m00 * m00 + perspectivetransform.m10 * m01 + perspectivetransform.m20 * m02;
            double d1 = perspectivetransform.m00 * m10 + perspectivetransform.m10 * m11 + perspectivetransform.m20 * m12;
            double d2 = perspectivetransform.m00 * m20 + perspectivetransform.m10 * m21 + perspectivetransform.m20 * m22;
            double d3 = perspectivetransform.m01 * m00 + perspectivetransform.m11 * m01 + perspectivetransform.m21 * m02;
            double d4 = perspectivetransform.m01 * m10 + perspectivetransform.m11 * m11 + perspectivetransform.m21 * m12;
            double d5 = perspectivetransform.m01 * m20 + perspectivetransform.m11 * m21 + perspectivetransform.m21 * m22;
            double d6 = perspectivetransform.m02 * m00 + perspectivetransform.m12 * m01 + perspectivetransform.m22 * m02;
            double d7 = perspectivetransform.m02 * m10 + perspectivetransform.m12 * m11 + perspectivetransform.m22 * m12;
            double d8 = perspectivetransform.m02 * m20 + perspectivetransform.m12 * m21 + perspectivetransform.m22 * m22;
            m00 = d;
            m10 = d1;
            m20 = d2;
            m01 = d3;
            m11 = d4;
            m21 = d5;
            m02 = d6;
            m12 = d7;
            m22 = d8;
            return;
        }
    }

    public PerspectiveTransform createInverse()
        throws NoninvertibleTransformException, CloneNotSupportedException
    {
        PerspectiveTransform perspectivetransform = (PerspectiveTransform)clone();
        perspectivetransform.makeAdjoint();
        if(Math.abs(perspectivetransform.m22) < 1E-010D)
        {
            throw new NoninvertibleTransformException(JaiI18N.getString("PerspectiveTransform0"));
        } else
        {
            perspectivetransform.normalize();
            return perspectivetransform;
        }
    }

    public PerspectiveTransform createAdjoint()
        throws CloneNotSupportedException
    {
        PerspectiveTransform perspectivetransform = (PerspectiveTransform)clone();
        perspectivetransform.makeAdjoint();
        return perspectivetransform;
    }

    public Point2D transform(Point2D point2d, Point2D point2d1)
    {
        if(point2d == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        if(point2d1 == null)
            if(point2d instanceof java.awt.geom.Point2D.Double)
                point2d1 = new java.awt.geom.Point2D.Double();
            else
                point2d1 = new java.awt.geom.Point2D.Float();
        double d = point2d.getX();
        double d1 = point2d.getY();
        double d2 = m20 * d + m21 * d1 + m22;
        point2d1.setLocation((m00 * d + m01 * d1 + m02) / d2, (m10 * d + m11 * d1 + m12) / d2);
        return point2d1;
    }

    public void transform(Point2D apoint2d[], int i, Point2D apoint2d1[], int j, int k)
    {
        if(apoint2d == null || apoint2d1 == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        while(k-- > 0) 
        {
            Point2D point2d = apoint2d[i++];
            Object obj = apoint2d1[j++];
            if(obj == null)
            {
                if(point2d instanceof java.awt.geom.Point2D.Double)
                    obj = new java.awt.geom.Point2D.Double();
                else
                    obj = new java.awt.geom.Point2D.Float();
                apoint2d1[j - 1] = ((Point2D) (obj));
            }
            double d = point2d.getX();
            double d1 = point2d.getY();
            double d2 = m20 * d + m21 * d1 + m22;
            if(d2 == 0.0D)
                ((Point2D) (obj)).setLocation(d, d1);
            else
                ((Point2D) (obj)).setLocation((m00 * d + m01 * d1 + m02) / d2, (m10 * d + m11 * d1 + m12) / d2);
        }
    }

    public void transform(float af[], int i, float af1[], int j, int k)
    {
        if(af == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        if(af1 == null)
            af1 = new float[k * 2 + j];
        while(k-- > 0) 
        {
            float f = af[i++];
            float f1 = af[i++];
            double d = m20 * (double)f + m21 * (double)f1 + m22;
            if(d == 0.0D)
            {
                af1[j++] = f;
                af1[j++] = f1;
            } else
            {
                af1[j++] = (float)((m00 * (double)f + m01 * (double)f1 + m02) / d);
                af1[j++] = (float)((m10 * (double)f + m11 * (double)f1 + m12) / d);
            }
        }
    }

    public void transform(double ad[], int i, double ad1[], int j, int k)
    {
        if(ad == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        if(ad1 == null)
            ad1 = new double[k * 2 + j];
        while(k-- > 0) 
        {
            double d = ad[i++];
            double d1 = ad[i++];
            double d2 = m20 * d + m21 * d1 + m22;
            if(d2 == 0.0D)
            {
                ad1[j++] = d;
                ad1[j++] = d1;
            } else
            {
                ad1[j++] = (m00 * d + m01 * d1 + m02) / d2;
                ad1[j++] = (m10 * d + m11 * d1 + m12) / d2;
            }
        }
    }

    public void transform(float af[], int i, double ad[], int j, int k)
    {
        if(af == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        if(ad == null)
            ad = new double[k * 2 + j];
        while(k-- > 0) 
        {
            float f = af[i++];
            float f1 = af[i++];
            double d = m20 * (double)f + m21 * (double)f1 + m22;
            if(d == 0.0D)
            {
                ad[j++] = f;
                ad[j++] = f1;
            } else
            {
                ad[j++] = (m00 * (double)f + m01 * (double)f1 + m02) / d;
                ad[j++] = (m10 * (double)f + m11 * (double)f1 + m12) / d;
            }
        }
    }

    public void transform(double ad[], int i, float af[], int j, int k)
    {
        if(ad == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        if(af == null)
            af = new float[k * 2 + j];
        while(k-- > 0) 
        {
            double d = ad[i++];
            double d1 = ad[i++];
            double d2 = m20 * d + m21 * d1 + m22;
            if(d2 == 0.0D)
            {
                af[j++] = (float)d;
                af[j++] = (float)d1;
            } else
            {
                af[j++] = (float)((m00 * d + m01 * d1 + m02) / d2);
                af[j++] = (float)((m10 * d + m11 * d1 + m12) / d2);
            }
        }
    }

    public Point2D inverseTransform(Point2D point2d, Point2D point2d1)
        throws NoninvertibleTransformException
    {
        if(point2d == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        if(point2d1 == null)
            if(point2d instanceof java.awt.geom.Point2D.Double)
                point2d1 = new java.awt.geom.Point2D.Double();
            else
                point2d1 = new java.awt.geom.Point2D.Float();
        double d = point2d.getX();
        double d1 = point2d.getY();
        double d2 = (m11 * m22 - m12 * m21) * d + (m02 * m21 - m01 * m22) * d1 + (m01 * m12 - m02 * m11);
        double d3 = (m12 * m20 - m10 * m22) * d + (m00 * m22 - m02 * m20) * d1 + (m02 * m10 - m00 * m12);
        double d4 = (m10 * m21 - m11 * m20) * d + (m01 * m20 - m00 * m21) * d1 + (m00 * m11 - m01 * m10);
        double d5 = d4;
        if(d4 < 0.0D)
            d5 = -d4;
        if(d5 < 1E-010D)
        {
            throw new NoninvertibleTransformException(JaiI18N.getString("PerspectiveTransform1"));
        } else
        {
            point2d1.setLocation(d2 / d4, d3 / d4);
            return point2d1;
        }
    }

    public void inverseTransform(double ad[], int i, double ad1[], int j, int k)
        throws NoninvertibleTransformException
    {
        if(ad == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        if(ad1 == null)
            ad1 = new double[k * 2 + j];
        while(k-- > 0) 
        {
            double d = ad[i++];
            double d1 = ad[i++];
            double d2 = (m11 * m22 - m12 * m21) * d + (m02 * m21 - m01 * m22) * d1 + (m01 * m12 - m02 * m11);
            double d3 = (m12 * m20 - m10 * m22) * d + (m00 * m22 - m02 * m20) * d1 + (m02 * m10 - m00 * m12);
            double d4 = (m10 * m21 - m11 * m20) * d + (m01 * m20 - m00 * m21) * d1 + (m00 * m11 - m01 * m10);
            double d5 = d4;
            if(d4 < 0.0D)
                d5 = -d4;
            if(d5 < 1E-010D)
                throw new NoninvertibleTransformException(JaiI18N.getString("PerspectiveTransform1"));
            ad1[j++] = d2 / d4;
            ad1[j++] = d3 / d4;
        }
    }

    public String toString()
    {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append("Perspective transform matrix\n");
        stringbuffer.append(m00);
        stringbuffer.append("\t");
        stringbuffer.append(m01);
        stringbuffer.append("\t");
        stringbuffer.append(m02);
        stringbuffer.append("\n");
        stringbuffer.append(m10);
        stringbuffer.append("\t");
        stringbuffer.append(m11);
        stringbuffer.append("\t");
        stringbuffer.append(m12);
        stringbuffer.append("\n");
        stringbuffer.append(m20);
        stringbuffer.append("\t");
        stringbuffer.append(m21);
        stringbuffer.append("\t");
        stringbuffer.append(m22);
        stringbuffer.append("\n");
        return new String(stringbuffer);
    }

    public boolean isIdentity()
    {
        return m01 == 0.0D && m02 == 0.0D && m10 == 0.0D && m12 == 0.0D && m20 == 0.0D && m21 == 0.0D && m22 != 0.0D && m00 / m22 == 1.0D && m11 / m22 == 1.0D;
    }

    public Object clone()
    {
        try
        {
            return super.clone();
        }
        catch(CloneNotSupportedException clonenotsupportedexception)
        {
            throw new InternalError();
        }
    }

    public boolean equals(Object obj)
    {
        if(!(obj instanceof PerspectiveTransform))
        {
            return false;
        } else
        {
            PerspectiveTransform perspectivetransform = (PerspectiveTransform)obj;
            return m00 == perspectivetransform.m00 && m10 == perspectivetransform.m10 && m20 == perspectivetransform.m20 && m01 == perspectivetransform.m01 && m11 == perspectivetransform.m11 && m21 == perspectivetransform.m21 && m02 == perspectivetransform.m02 && m12 == perspectivetransform.m12 && m22 == perspectivetransform.m22;
        }
    }

    private static final double PERSPECTIVE_DIVIDE_EPSILON = 1E-010D;
    double m00;
    double m01;
    double m02;
    double m10;
    double m11;
    double m12;
    double m20;
    double m21;
    double m22;
}
