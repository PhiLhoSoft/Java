// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   WarpPerspective.java

package javax.media.jai;

import java.awt.Rectangle;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;

// Referenced classes of package javax.media.jai:
//            Warp, PerspectiveTransform, JaiI18N

public final class WarpPerspective extends Warp
{

    public WarpPerspective(PerspectiveTransform perspectivetransform)
    {
        if(perspectivetransform == null)
            throw new IllegalArgumentException(JaiI18N.getString("WarpPerspective0"));
        transform = perspectivetransform;
        try
        {
            invTransform = perspectivetransform.createInverse();
        }
        catch(NoninvertibleTransformException noninvertibletransformexception)
        {
            invTransform = null;
        }
        catch(CloneNotSupportedException clonenotsupportedexception)
        {
            invTransform = null;
        }
    }

    public PerspectiveTransform getTransform()
    {
        return (PerspectiveTransform)transform.clone();
    }

    public float[] warpSparseRect(int i, int j, int k, int l, int i1, int j1, float af[])
    {
        if(af == null)
            af = new float[2 * (((k + i1) - 1) / i1) * (((l + j1) - 1) / j1)];
        double ad[][] = new double[3][3];
        ad = transform.getMatrix(ad);
        float f = (float)ad[0][0];
        float f1 = (float)ad[0][1];
        float f2 = (float)ad[0][2];
        float f3 = (float)ad[1][0];
        float f4 = (float)ad[1][1];
        float f5 = (float)ad[1][2];
        float f6 = (float)ad[2][0];
        float f7 = (float)ad[2][1];
        float f8 = (float)ad[2][2];
        float f9 = f * (float)i1;
        float f10 = f3 * (float)i1;
        float f11 = f6 * (float)i1;
        float f12 = (float)i + 0.5F;
        k += i;
        l += j;
        int k1 = 0;
        for(int l1 = j; l1 < l; l1 += j1)
        {
            float f13 = (float)l1 + 0.5F;
            float f14 = f * f12 + f1 * f13 + f2;
            float f15 = f3 * f12 + f4 * f13 + f5;
            float f16 = f6 * f12 + f7 * f13 + f8;
            for(int i2 = i; i2 < k; i2 += i1)
            {
                float f17;
                float f18;
                try
                {
                    f17 = f14 / f16;
                    f18 = f15 / f16;
                }
                catch(ArithmeticException arithmeticexception)
                {
                    f17 = (float)i2 + 0.5F;
                    f18 = (float)l1 + 0.5F;
                }
                af[k1++] = f17 - 0.5F;
                af[k1++] = f18 - 0.5F;
                f14 += f9;
                f15 += f10;
                f16 += f11;
            }

        }

        return af;
    }

    public Rectangle mapDestRect(Rectangle rectangle)
    {
        if(rectangle == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        int i = rectangle.x;
        int j = rectangle.x + rectangle.width;
        int k = rectangle.y;
        int l = rectangle.y + rectangle.height;
        Point2D apoint2d[] = new Point2D[4];
        apoint2d[0] = new java.awt.geom.Point2D.Float(i, k);
        apoint2d[1] = new java.awt.geom.Point2D.Float(j, k);
        apoint2d[2] = new java.awt.geom.Point2D.Float(i, l);
        apoint2d[3] = new java.awt.geom.Point2D.Float(j, l);
        transform.transform(apoint2d, 0, apoint2d, 0, 4);
        int i1 = 0x7fffffff;
        int j1 = 0x80000000;
        int k1 = 0x7fffffff;
        int l1 = 0x80000000;
        for(int i2 = 0; i2 < 4; i2++)
        {
            int j2 = (int)apoint2d[i2].getX();
            int k2 = (int)apoint2d[i2].getY();
            i1 = Math.min(i1, j2);
            j1 = Math.max(j1, j2);
            k1 = Math.min(k1, k2);
            l1 = Math.max(l1, k2);
        }

        return new Rectangle(i1, k1, j1 - i1, l1 - k1);
    }

    public Rectangle mapSourceRect(Rectangle rectangle)
    {
        if(rectangle == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        if(invTransform == null)
            return null;
        int i = rectangle.x;
        int j = rectangle.x + rectangle.width;
        int k = rectangle.y;
        int l = rectangle.y + rectangle.height;
        Point2D apoint2d[] = new Point2D[4];
        apoint2d[0] = new java.awt.geom.Point2D.Float(i, k);
        apoint2d[1] = new java.awt.geom.Point2D.Float(j, k);
        apoint2d[2] = new java.awt.geom.Point2D.Float(i, l);
        apoint2d[3] = new java.awt.geom.Point2D.Float(j, l);
        invTransform.transform(apoint2d, 0, apoint2d, 0, 4);
        int i1 = 0x7fffffff;
        int j1 = 0x80000000;
        int k1 = 0x7fffffff;
        int l1 = 0x80000000;
        for(int i2 = 0; i2 < 4; i2++)
        {
            int j2 = (int)apoint2d[i2].getX();
            int k2 = (int)apoint2d[i2].getY();
            i1 = Math.min(i1, j2);
            j1 = Math.max(j1, j2);
            k1 = Math.min(k1, k2);
            l1 = Math.max(l1, k2);
        }

        return new Rectangle(i1, k1, j1 - i1, l1 - k1);
    }

    public Point2D mapDestPoint(Point2D point2d)
    {
        if(point2d == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        else
            return transform.transform(point2d, null);
    }

    public Point2D mapSourcePoint(Point2D point2d)
    {
        if(point2d == null)
            throw new IllegalArgumentException(JaiI18N.getString("Generic0"));
        else
            return invTransform == null ? null : invTransform.transform(point2d, null);
    }

    private PerspectiveTransform transform;
    private PerspectiveTransform invTransform;
}
